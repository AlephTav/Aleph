<?php
/**
 * Copyright (c) 2013 - 2015 Aleph Tav
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, 
 * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
 * THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * @author Aleph Tav <4lephtav@gmail.com>
 * @link http://www.4leph.com
 * @copyright Copyright &copy; 2013 - 2015 Aleph Tav
 * @license http://www.opensource.org/licenses/MIT
 */

namespace Aleph\DB\Sync;

/**
 * Base class for all classes changing database structure.
 *
 * @author Aleph Tav <4lephtav@gmail.com>
 * @version 1.0.0
 * @package aleph.db.sync
 * @abstract
 */
abstract class DBWriter implements IWriter
{
  /**
   * The instance of Aleph\DB\Sync\DBCore class. 
   *
   * @var Aleph\DB\Sync\DBCore $db
   * @access protected
   */
  protected $db = null;
  
  /**
   * Array of SQL queries, generated by synchronizer when changing the database structure.
   *
   * @var array $queries
   * @access protected
   */
  protected $queries = array();
  
  /**
   * Constructor.
   *
   * @param Aleph\DB\Sync\DBCore $db
   * @access public
   */
  public function __construct(DBCore $db)
  {
    $this->db = $db;
    $this->queries = array();
  }
  
  /**
   * Returns array of queries, generated by synchronizer when changing the database structure.
   *
   * @return array
   * @access public
   */
  public function getQueries()
  {
    return $this->queries;
  }
  
  /**
   * Executes specified SQL query. 
   *
   * @param PDO $pdo
   * @param string $class - class of the query.
   * @param string $type - type of the query.
   * @param array $params - parameters of the query.
   * @access protected
   */
  protected function setData(\PDO $pdo, $class, $type, array $params = null)
  {
    $sql = $this->db->getSQL($class, $type, $params);
    $this->queries[] = $sql;
    $pdo->prepare($sql)->execute();
  }
}